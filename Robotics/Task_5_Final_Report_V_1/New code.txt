// Ultrasonic Configuration
#define trigPin_R 8
#define trigPin_L 10
#define trigPin_F 12
#define echoPin_R 9
#define echoPin_L 11
#define echoPin_F 13

char TrigArr[] = { trigPin_R, trigPin_F, trigPin_L };
char EchoArr[] = { echoPin_R, echoPin_F, echoPin_L };

// Filter Conficuration
#define WindowSize  2

// Motor Driver Configuration
#define IN1 1
#define IN2 2
#define IN3 3
#define IN4 4
#define EN1 5
#define EN2 6

// Speed and Distance Conficuration
#define potSpeed                  A0
#define max_dist                  4
#define max_track_speed_change    0.45*speed
#define max_turn_speed_change     0.8*speed
int speed = 0;
float maxSpeedChange;

// Program Variables
long duration;
float distanceCm;
float DataArr[WindowSize][3];
float UltrData[3];


// Functions Prototype
void InitPins(void);
void DataInit(void);
void SendDataToSerial(void);
float UltrasonicRead(char Ultranum);
float UltrasonicRead_WithAverage(char Ultranum);

// PID Variables And Configuration
#define potKp     A1
#define potKi     A2
#define potKd     A3

float elapsedTime , time , timePrev;
float PID , pid_p , pid_i , pid_d , kp , ki , kd , pwmLeft , pwmRight , error , previous_error;


void setup() {
  InitPins();
  Serial.begin(9600);
  time = millis();
  DataInit();
}

void loop() {

  // Speed And PID Constants Calculations
  speed = map(analogRead(potSpeed), 0, 1023, 0, 255);
  kp = 0.7*speed;
  ki = 0.05*speed;
  kd = 0.2*speed;

  // Calculate Time For Derivitave Part
  timePrev = time;
  previous_error = error;
  time = millis();
  elapsedTime = (time - timePrev) / 1000;

  // Get Filtered Data From Ultrasonic
  for (char i = 0; i < 3; i++) {
    UltrData[i] = UltrasonicRead_WithAverage(i);
  }
  error = (UltrData[0] - UltrData[2]);

  // Limit Error Values
  error = constrain(error,-1,1);


  // PID Calculations
  pid_p = kp * error;
  pid_i += ki * error*elapsedTime;
  pid_d = kd * ((error - previous_error) / elapsedTime);
  PID = pid_p + pid_i + pid_d;
  
  // Limit PID Values Depends On Place Of The Car
  maxSpeedChange = UltrData[1] > 3 ? max_track_speed_change : max_turn_speed_change;
  PID = constrain(PID, -maxSpeedChange, maxSpeedChange);

  // DC Motors Speed Calculations
  pwmLeft = speed + PID;
  pwmRight = speed - PID;

  pwmLeft = constrain(pwmLeft   , 80, speed);
  pwmRight = constrain(pwmRight , 80, speed);
  // Apply Speed Of DC Motors
  analogWrite(EN1, pwmLeft);
  analogWrite(EN2, pwmRight);

  // View Variables Values On Serial Monitor
  SendDataToSerial();
}


// Helper Functions

float UltrasonicRead(char Ultranum) {

  digitalWrite(TrigArr[Ultranum], LOW);
  delayMicroseconds(2);
  digitalWrite(TrigArr[Ultranum], HIGH);
  delayMicroseconds(10);
  digitalWrite(TrigArr[Ultranum], LOW);

  duration = pulseIn(EchoArr[Ultranum], HIGH);
  distanceCm = (duration * 0.0343) / 2.0;
  if (distanceCm > max_dist * 100) {
    distanceCm = max_dist * 100;
  }
  return distanceCm / 100;
}


float UltrasonicRead_WithAverage(char Ultranum) {

  float sum = 0;
  for (int i = 0; i < WindowSize - 1; i++) {
    DataArr[i][Ultranum] = DataArr[i + 1][Ultranum];
    sum += DataArr[i][Ultranum];
  }

  DataArr[WindowSize - 1][Ultranum] = UltrasonicRead(Ultranum);
  sum += DataArr[WindowSize - 1][Ultranum];
  return (sum / WindowSize);
}

void DataInit(void) {
  for (int j = 0; j < 3; j++) {
    for (int i = 0; i < WindowSize; i++) {
      DataArr[i][j] = UltrasonicRead(j);
    }
  }
}


void InitPins(void){
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(EN1, OUTPUT);
  pinMode(EN2, OUTPUT);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);

  pinMode(trigPin_R, OUTPUT);
  pinMode(echoPin_R, INPUT);
  pinMode(trigPin_F, OUTPUT);
  pinMode(echoPin_F, INPUT);
  pinMode(trigPin_L, OUTPUT);
  pinMode(echoPin_L, INPUT);

  pinMode(potSpeed, INPUT);
  pinMode(potKp, INPUT);
  pinMode(potKi, INPUT);
  pinMode(potKd, INPUT);
}

void SendDataToSerial(void){
  Serial.print("Car Speed : ");
  Serial.print(speed);
  Serial.print(" , kp : ");
  Serial.print(kp);
  Serial.print(" , ki : ");
  Serial.print(ki);
  Serial.print(" , kd : ");
  Serial.print(kd);
  Serial.print(" , Right Distance : ");
  Serial.print(UltrData[0]);
  Serial.print(" , Front Distance : ");
  Serial.print(UltrData[1]);
  Serial.print(" , Left Distance : ");
  Serial.print(UltrData[2]);
  Serial.print(" , Tracking Error : ");
  Serial.print(error);
  Serial.print(" , Propotional Gain : ");
  Serial.print(pid_p);
  Serial.print(" , Integrale Gain : ");
  Serial.print(pid_i);
  Serial.print(" , Direvitive Gain : ");
  Serial.print(pid_d);
  Serial.print(" , Total PID : ");
  Serial.print(PID);
  Serial.print(" , PWM Right : ");
  Serial.print(pwmRight);
  Serial.print(" , Pwm Left : ");
  Serial.print(pwmLeft);
  Serial.print(" , Elapsed Time : ");
  Serial.print(elapsedTime);
  Serial.println();
}
